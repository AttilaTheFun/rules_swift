# Copyright 2024 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Defines a rule for compiling Swift source files from ProtoInfo providers.
"""

load(
    "@bazel_skylib//lib:paths.bzl",
    "paths",
)
load(
    "//swift/internal:providers.bzl",
    "SwiftInfo",
    "SwiftProtoCompilerInfo",
)
load(
    "//swift/proto:swift_proto_utils.bzl",
    "proto_path",
)

def _custom_swift_proto_compile(ctx, swift_proto_compiler_info, additional_compiler_info, proto_infos, imports):
    """Compiles Swift source files from `ProtoInfo` providers.

    Args:
        ctx: the `swift_proto_library` target's context
        swift_proto_compiler_info: this `SwiftProtoCompilerInfo` provider
        additional_compiler_info: information passed from the `swift_proto_library` target to the compiler
        proto_infos: the list of `ProtoInfo` providers to compile
        imports: the imports field of the `SwiftProtoImportInfo` for the `swift_proto_library` target

    Returns:
        A list of .swift Files generated by the compiler.
    """

    # Declare the Swift files that will be generated:
    swift_srcs = []
    transitive_proto_srcs_list = []
    proto_paths = {}
    for proto_info in proto_infos:
        transitive_proto_srcs_list.append(proto_info.transitive_sources)

        # Iterate over the proto sources in the `ProtoInfo` to gather information
        # about their proto sources and declare the swift files that will be generated:
        for proto_src in proto_info.check_deps_sources.to_list():
            # Derive the proto path:
            path = proto_path(proto_src, proto_info)
            if path in proto_paths:
                if proto_paths[path] != proto_src:
                    fail("proto files {} and {} have the same import path, {}".format(
                        proto_src.path,
                        proto_paths[path].path,
                        path,
                    ))
                continue
            proto_paths[path] = proto_src

            # Declare the Swift source files that will be generated:
            base_swift_src_path = paths.replace_extension(path, ".swift")
            swift_src_path = paths.join(ctx.label.name, base_swift_src_path)
            swift_src = ctx.actions.declare_file(swift_src_path)
            swift_srcs.append(swift_src)
    transitive_proto_srcs = depset(direct = [], transitive = transitive_proto_srcs_list)

    # Prevent complaint about unused variables:
    if additional_compiler_info and imports:
        swift_srcs.extend([])

    # Build the arguments for compiler:
    arguments = ctx.actions.args()
    arguments.use_param_file("--param=%s")

    # Finally, add the proto paths:
    # arguments.add_all(proto_paths.keys())
    arguments.add_all(swift_srcs)

    # Run the compiler action:
    ctx.actions.run(
        inputs = depset(
            direct = [
                swift_proto_compiler_info.internal.compiler,
            ],
            transitive = [transitive_proto_srcs],
        ),
        outputs = swift_srcs,
        mnemonic = "SwiftProtocGen",
        executable = swift_proto_compiler_info.internal.compiler,
        arguments = [arguments],
    )

    return swift_srcs

def _custom_swift_proto_compiler_impl(ctx):
    return [
        SwiftProtoCompilerInfo(
            compile = _custom_swift_proto_compile,
            compiler_deps = ctx.attr.deps,
            internal = struct(
                compiler = ctx.executable._compiler,
            ),
        ),
    ]

custom_swift_proto_compiler = rule(
    implementation = _custom_swift_proto_compiler_impl,
    attrs = {
        "deps": attr.label_list(
            default = [],
            doc = """\
            List of targets providing SwiftInfo and CcInfo.
            Added as implicit dependencies for any swift_proto_library using this
            compiler. Typically, these are Well Known Types and proto runtime libraries.
            """,
            providers = [SwiftInfo],
        ),
        "_compiler": attr.label(
            doc = """\
            A proto compiler executable binary.
            """,
            default = "//examples/xplatform/custom_swift_proto_compiler/rules:custom_swift_proto_compiler",
            executable = True,
            cfg = "exec",
        ),
    },
)
